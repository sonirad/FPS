//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input_Action/Test_Input_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Test_Input_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Test_Input_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test_Input_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""39d723e7-b172-4b1c-863e-d4e5825b5e21"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b0fa832b-295f-4fe2-8e3f-48c1847ba882"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90d62eb9-65a7-410b-a94b-48323cd260a0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""bcdcf540-cd90-4753-9306-7dbfbc0c0fa0"",
            ""actions"": [
                {
                    ""name"": ""Test_01"",
                    ""type"": ""Button"",
                    ""id"": ""4f13854a-0cd2-4580-81a2-36452733e706"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_02"",
                    ""type"": ""Button"",
                    ""id"": ""259143f7-f1a1-41f9-bc97-5427faac0325"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_03"",
                    ""type"": ""Button"",
                    ""id"": ""c531ca68-5d42-422f-83ea-23bce68ade6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_04"",
                    ""type"": ""Button"",
                    ""id"": ""382cf189-d918-41ae-85c4-dad85cdf36d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_05"",
                    ""type"": ""Button"",
                    ""id"": ""a3c5fa99-86b1-4c33-919e-2c877c57ef05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L_Click"",
                    ""type"": ""Button"",
                    ""id"": ""bfdf3144-558a-4617-97ed-e1bc63b69974"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R_Click"",
                    ""type"": ""Button"",
                    ""id"": ""e8814f77-1dd9-422a-a134-b8d3a339f20f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""152929a5-ef9c-4d17-bd31-e3185e5dba8d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60968b0e-16f0-41b1-9247-499ce6db2edd"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d08de25a-40b3-4c04-88c9-bea75bb13d0e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_03"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0ce8808-eb82-470f-8e9a-4b7730f1dbf2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_04"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b86102f-da11-4524-9a6c-ea26cf092ccc"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_05"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18f525be-e03f-4a8b-a9e2-0f19cce509c2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L_Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""051dfdd4-f377-4157-a612-f36fd9653b1d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R_Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Newaction = m_Player.FindAction("New action", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test_01 = m_Test.FindAction("Test_01", throwIfNotFound: true);
        m_Test_Test_02 = m_Test.FindAction("Test_02", throwIfNotFound: true);
        m_Test_Test_03 = m_Test.FindAction("Test_03", throwIfNotFound: true);
        m_Test_Test_04 = m_Test.FindAction("Test_04", throwIfNotFound: true);
        m_Test_Test_05 = m_Test.FindAction("Test_05", throwIfNotFound: true);
        m_Test_L_Click = m_Test.FindAction("L_Click", throwIfNotFound: true);
        m_Test_R_Click = m_Test.FindAction("R_Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Newaction;
    public struct PlayerActions
    {
        private @Test_Input_Actions m_Wrapper;
        public PlayerActions(@Test_Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Player_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test_01;
    private readonly InputAction m_Test_Test_02;
    private readonly InputAction m_Test_Test_03;
    private readonly InputAction m_Test_Test_04;
    private readonly InputAction m_Test_Test_05;
    private readonly InputAction m_Test_L_Click;
    private readonly InputAction m_Test_R_Click;
    public struct TestActions
    {
        private @Test_Input_Actions m_Wrapper;
        public TestActions(@Test_Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test_01 => m_Wrapper.m_Test_Test_01;
        public InputAction @Test_02 => m_Wrapper.m_Test_Test_02;
        public InputAction @Test_03 => m_Wrapper.m_Test_Test_03;
        public InputAction @Test_04 => m_Wrapper.m_Test_Test_04;
        public InputAction @Test_05 => m_Wrapper.m_Test_Test_05;
        public InputAction @L_Click => m_Wrapper.m_Test_L_Click;
        public InputAction @R_Click => m_Wrapper.m_Test_R_Click;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test_01.started += instance.OnTest_01;
            @Test_01.performed += instance.OnTest_01;
            @Test_01.canceled += instance.OnTest_01;
            @Test_02.started += instance.OnTest_02;
            @Test_02.performed += instance.OnTest_02;
            @Test_02.canceled += instance.OnTest_02;
            @Test_03.started += instance.OnTest_03;
            @Test_03.performed += instance.OnTest_03;
            @Test_03.canceled += instance.OnTest_03;
            @Test_04.started += instance.OnTest_04;
            @Test_04.performed += instance.OnTest_04;
            @Test_04.canceled += instance.OnTest_04;
            @Test_05.started += instance.OnTest_05;
            @Test_05.performed += instance.OnTest_05;
            @Test_05.canceled += instance.OnTest_05;
            @L_Click.started += instance.OnL_Click;
            @L_Click.performed += instance.OnL_Click;
            @L_Click.canceled += instance.OnL_Click;
            @R_Click.started += instance.OnR_Click;
            @R_Click.performed += instance.OnR_Click;
            @R_Click.canceled += instance.OnR_Click;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test_01.started -= instance.OnTest_01;
            @Test_01.performed -= instance.OnTest_01;
            @Test_01.canceled -= instance.OnTest_01;
            @Test_02.started -= instance.OnTest_02;
            @Test_02.performed -= instance.OnTest_02;
            @Test_02.canceled -= instance.OnTest_02;
            @Test_03.started -= instance.OnTest_03;
            @Test_03.performed -= instance.OnTest_03;
            @Test_03.canceled -= instance.OnTest_03;
            @Test_04.started -= instance.OnTest_04;
            @Test_04.performed -= instance.OnTest_04;
            @Test_04.canceled -= instance.OnTest_04;
            @Test_05.started -= instance.OnTest_05;
            @Test_05.performed -= instance.OnTest_05;
            @Test_05.canceled -= instance.OnTest_05;
            @L_Click.started -= instance.OnL_Click;
            @L_Click.performed -= instance.OnL_Click;
            @L_Click.canceled -= instance.OnL_Click;
            @R_Click.started -= instance.OnR_Click;
            @R_Click.performed -= instance.OnR_Click;
            @R_Click.canceled -= instance.OnR_Click;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    public interface IPlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest_01(InputAction.CallbackContext context);
        void OnTest_02(InputAction.CallbackContext context);
        void OnTest_03(InputAction.CallbackContext context);
        void OnTest_04(InputAction.CallbackContext context);
        void OnTest_05(InputAction.CallbackContext context);
        void OnL_Click(InputAction.CallbackContext context);
        void OnR_Click(InputAction.CallbackContext context);
    }
}
